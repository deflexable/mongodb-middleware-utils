"use strict";var t=require("mongodb"),e=require("worker_threads"),r=require("url"),n=require("path"),i=require("./peripherals-FC5hXhuY.js"),a="undefined"!=typeof document?document.currentScript:null;const o="undefined"!=typeof __dirname?__dirname:n.dirname(r.fileURLToPath("undefined"==typeof document?require("url").pathToFileURL(__filename).href:a&&a.src||new URL("index.js",document.baseURI).href)),s="__fta_",l="__rdz";class c extends t.MongoClient{constructor({map:t,url:e,options:r}){super(e,r),this.interceptMap=t}get db(){return u(super.db.bind(this),this.interceptMap)}__intercepted=!0}const u=(t,e)=>function(){const r=t(...arguments),[n]=[...arguments];let i=function(){const t=[...arguments],i=r.collection(...t),a={},o=t[0];return Object.entries(e).forEach((([t,e])=>{const[r,c]=t.split("::");if(n===r&&o===c&&(e?.fulltext||e?.random)){const{fulltext:r,random:n}=e;if(r)if(Array.isArray(r)){if(r.filter((t=>"string"!=typeof t||t.includes("."))).length)throw`invalid intercept value in ${t}, fulltext array must contain a string without "." value but got ${JSON.stringify(r)}`;if(!r.length)throw`invalid intercept value in ${t}, fulltext array must not be empty`;if(r.filter(((t,e,r)=>r.indexOf(t)===e)).length!==r.length)throw`invalid intercept value in ${t}, fulltext array must not contain duplicate value but got ${r}`}else{if("string"!=typeof r||r.includes("."))throw`invalid intercept value in ${t}, fulltext must either be a string without "." or array but got ${r}`;if(!r.trim())throw`invalid intercept value in ${t}, fulltext must not be empty`}if(n&&"boolean"!=typeof n)throw`invalid intercept value in ${t}, random should be a boolean value but got ${e}`;const o=t=>{if(t?.$text?.$search&&r){const e=t.$text.$field||r,n=Array.isArray(e)?e:[e];if(n.filter(((t,e,r)=>r.indexOf(t)===e)).length!==n.length)throw"$field must not contain duplicate values";delete(t={...t,$or:[...t?.$or||[],...n.map((e=>({[`${s}${e}`]:{$in:[p(t?.$text?.$search)]}})))]}).$text}return t},c=t=>{let e=t;if(Buffer.isBuffer(e)&&(e=Buffer.from(e).toJSON()),!e)return Buffer.isBuffer(t)?t:e;let r=(Array.isArray(e)?e:[e]).map((t=>{const e={...t};return Object.keys(t).forEach((t=>{(t.startsWith(s)||t===l)&&delete e[t]})),e}));return r=Array.isArray(e)?r:r[0],Buffer.isBuffer(t)?Buffer.from(JSON.stringify(r),"utf8"):r},u=async t=>(m(t)&&((t={...t}).$set&&(t.$set=await y(t.$set,e)),t.$unset&&(Array.isArray(r)?r:[r]).forEach((e=>{t.$unset[e]&&(t.$unset[`${s}${e}`]=!0)}))),t);a.insertOne=async function(){return await i.insertOne(await y([...arguments][0],e),[...arguments][1])},a.insertMany=async function(){return await i.insertMany(await Promise.all([...arguments][0].map((t=>y(t,e)))),[...arguments][1])},["updateOne","updateMany"].forEach((t=>{a[t]=async function(){const e=[...arguments];return await i[t](o(e[0]),u(e[1]),e[2])}})),a.replaceOne=async function(){return await i.replaceOne(o([...arguments][0]),await y([...arguments][1],e),[...arguments][2])},a.bulkWrite=async function(){let[t,...r]=[...arguments];return await i.bulkWrite(await Promise.all(t.map((async t=>{const r={};return await Promise.all(Object.entries(t).map((async([t,n])=>{r[t]={...n,...n.filter?{filter:o(n.filter)}:{},...n.arrayFilters?{}:{arrayFilters:n.arrayFilters.map(o)},...n.document?{document:await y(n,e)}:{},...n.replacement?{replacement:await y(n,e)}:{},...n.update?{update:await u(n)}:{}}}))),r}))),...r)},a.find=function(){let[t,...e]=[...arguments];const r=i.find(o(t),...e),n=r.toArray.bind(r);return r.toArray=async()=>c(await n()),r},a.findOne=async function(){let[t,...e]=[...arguments];const r=await i.findOne(o(t),...e);return c(r)},a.watch=function(){const[t,...e]=[...arguments],r=i.watch(Array.isArray(t)?t.map(o):o(t),...e),n={};let a=0,s={};return["on","once","prependListener","addListener","prependOnceListener"].forEach((t=>{n[t]=(e,n)=>{if("change"===e){const e=""+ ++a;return s[e]=t=>{const e=Buffer.isBuffer(t)?Buffer.from(t).toJSON():t;e.fullDocument&&(e.fullDocument=c(e.fullDocument)),e.fullDocumentBeforeChange&&(e.fullDocumentBeforeChange=c(e.fullDocumentBeforeChange)),e.updateDescription?.updatedFields&&(e.updateDescription=c(e.updateDescription.updatedFields)),n?.(Buffer.isBuffer(t)?Buffer.from(JSON.stringify(e),"utf8"):e)},n.prototype||(n.prototype={}),n.prototype.__cloneMongodbListener||(n.prototype.__cloneMongodbListener=[]),n.prototype.__cloneMongodbListener.push(e),r[t]("change",s[e])}return r[t](e,n)}})),["off","removeListener"].forEach((t=>{n[t]=(e,n)=>{if("change"===e){const i=n.prototype?.__cloneMongodbListener;i&&(i.forEach((n=>{r[t](e,s[n]),s[n]&&delete s[n]})),delete n.prototype.__cloneMongodbListener)}else r[t](e,t)}})),new Proxy({},{get:(t,e)=>n[e]?n[e]:"function"==typeof r[e]?r[e].bind(r):r[e],set(t,e,i){n[e]?n[e]=i:r[e]=i}})},a.aggregate=function(){const[t,e]=[...arguments],[r,a]=t,s=r?.$sample?.size,u=o(a?.$match),p=Number.isInteger(s)&&s>0&&n,y=i.aggregate(t.map((t=>t?.$match?{...t,$match:o(t.$match)}:t)),e),m=y.toArray.bind(y);y.toArray=async()=>c(await m());let h=async()=>{const[t,e]=await Promise.all(["asc","desc"].map((t=>i.find({...u}).sort(l,t).limit(1).toArray()))),[r,n]=[t[0]?.[l],e[0]?.[l]];if(isNaN(r)||isNaN(n))return[];if(r===n)return c(t);{const t=s+0,e=(n-r)/t,a=[];let o=r;Array(t).fill().forEach((()=>{a.push(d(o+=e,o))}));const p=await Promise.all(a.map((t=>i.find({...u,[`${l}`]:{$gte:t}}).sort(l,"asc").limit(3).toArray()))),y=f(p.flat().filter(((t,e,r)=>r.findIndex((e=>e._id===t._id))===e)));if(y.length>=s)return c(y.slice(0,s));{const t=await Promise.all(["asc","desc"].map((t=>i.find({...u}).sort(l,t).limit(Math.ceil(s/2)).toArray()))),e=[...y,...f(t.flat().filter(((t,e,r)=>r.findIndex((e=>e._id===t._id))===e)))].filter(((t,e,r)=>r.findIndex((e=>e._id===t._id))===e));return c(e.slice(0,s))}}};return new Proxy({},{get:(t,e)=>"toArray"===e&&p?h:"function"==typeof y[e]?y[e].bind(y):y[e],set(t,e,r){"toArray"===e&&p?h=r:y[e]=r}})}}})),new Proxy({},{get:(t,e)=>a[e]?a[e]:"function"==typeof i[e]?i[e].bind(i):i[e],set:(t,e,r)=>{a[e]?a[e]=r:i[e]=r}})};return new Proxy({},{get:(t,e)=>"collection"===e?i:"function"==typeof r[e]?r[e].bind(r):r[e],set(t,e,n){"collection"===e?i=n:r[e]=n}})},f=t=>{const e=[...t];let r,n=e.length;for(;0!=n;)r=Math.floor(Math.random()*n),n--,[e[n],e[r]]=[e[r],e[n]];return e},d=(t=70,e=0)=>(t-e)*Math.random()+e,p=t=>i.transformPunctuation(t.trim()),y=async(t,{fulltext:e,random:r})=>{if(!m(t))return t;const n={...t};if(e){e=Array.isArray(e)?e:[e];const r=Date.now();console.log("building fulltext"),await Promise.all(e.map((async e=>{const r=t[e];"string"==typeof r&&r.trim()&&(n[`${s}${e}`]=await h(r))}))),console.log("index completed in:",Date.now()-r)}return r&&(n[l]=Math.random()),n},m=t=>null!==t&&"object"==typeof t&&!Array.isArray(t),h=async t=>{const e=await Promise.all($(t).map((t=>g(`${o}/worker.js`,{text:t}))));return[...new Set(e.map((t=>t.indexes)).flat())]},g=(t,r)=>new Promise((n=>{const i=new e.Worker(t);i.on("message",(t=>{n(t)})),i.postMessage(r)})),w=2e4,$=(t="")=>{t=t.split(" ");let e=[[]],r=0,n=0;for(let i=0;i<t.length;i++){const a=t[i];n+=a.length,++r<=2700&&n<w||!e[e.length-1].length?e[e.length-1].push(a):(e.push([a]),n=a.length,r=1)}const i=[];return e.forEach((t=>{t.length&&(t[0].length>w?Array(Math.ceil(t[0].length/w)).fill().forEach(((e,r)=>{i.push(t[0].substring(r*w,(r+1)*w))})):i.push(t.join(" ")))})),i};exports.MongoClientHack=c,exports.getFulltextArray=h,exports.proxyClient=t=>e=>{if(e.__intercepted)throw"this MongoClient instance was previously intercepted";const r=e.db.bind(e);e.db=u(r,t),e.__intercepted=!0};
